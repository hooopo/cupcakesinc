

== Creation STEP-BY-STEP

$ rails awdemo-bizapp

=== create mysql databases
mysqladmin -uroot -p create cupcake_development
mysqladmin -uroot -p create cupcake_test


=== create basic structures

ruby script/generate nifty_layout

ruby script/generate nifty_scaffold customer name:string description:string

ruby script/generate nifty_scaffold recipe name:string production_cost:decimal
# recipe_ingredients - not considered for now, keep the model relatively simple
ruby script/generate nifty_scaffold product name:string description:string recipe_id:integer unit_price:decimal

ruby script/generate nifty_scaffold order customer_id:integer order_date:datetime
ruby script/generate nifty_scaffold order_item order_id:integer product_id:integer qty:integer unit_price:decimal

=== demo activewarehouse to load database from csv

$ gem install activewarehouse-etl

ActiveWarehouse ETL depends on ActiveSupport, ActiveRecord, adapter_extensions and FasterCSV. If necessary you may have to approve the installation of these dependencies if they are not already installed.

# create ETL execution database and add defintiion to config/database.yml
$ mysqladmin -uroot -p create etl_execution

path delimiters are not unified cross-systems. This will fail (silently):
file: db\etl/source_data/products.csv

=== native reports module

ruby script/generate controller reports index



== ETL Processing

$ etl db/etl/load_products.ctl

$ etl db/etl/load_customers.ctl

$ etl db/etl/load_orders.ctl
















== Description of Contents

app
  Holds all the code that's specific to this particular application.

app/controllers
  Holds controllers that should be named like weblogs_controller.rb for
  automated URL mapping. All controllers should descend from ApplicationController
  which itself descends from ActionController::Base.

app/models
  Holds models that should be named like post.rb.
  Most models will descend from ActiveRecord::Base.

app/views
  Holds the template files for the view that should be named like
  weblogs/index.html.erb for the WeblogsController#index action. All views use eRuby
  syntax.

app/views/layouts
  Holds the template files for layouts to be used with views. This models the common
  header/footer method of wrapping views. In your views, define a layout using the
  <tt>layout :default</tt> and create a file named default.html.erb. Inside default.html.erb,
  call <% yield %> to render the view using this layout.

app/helpers
  Holds view helpers that should be named like weblogs_helper.rb. These are generated
  for you automatically when using script/generate for controllers. Helpers can be used to
  wrap functionality for your views into methods.

config
  Configuration files for the Rails environment, the routing map, the database, and other dependencies.

db
  Contains the database schema in schema.rb.  db/migrate contains all
  the sequence of Migrations for your schema.

doc
  This directory is where your application documentation will be stored when generated
  using <tt>rake doc:app</tt>

lib
  Application specific libraries. Basically, any kind of custom code that doesn't
  belong under controllers, models, or helpers. This directory is in the load path.

public
  The directory available for the web server. Contains subdirectories for images, stylesheets,
  and javascripts. Also contains the dispatchers and the default HTML files. This should be
  set as the DOCUMENT_ROOT of your web server.

script
  Helper scripts for automation and generation.

test
  Unit and functional tests along with fixtures. When using the script/generate scripts, template
  test files will be generated for you and placed in this directory.

vendor
  External libraries that the application depends on. Also includes the plugins subdirectory.
  If the app has frozen rails, those gems also go here, under vendor/rails/.
  This directory is in the load path.
